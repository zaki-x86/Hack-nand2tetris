// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	// if addr[13] && addr[14] bits are both set, we are at keyboard mem location
    And (a=address[13], b=address[14], out=isKbd);
	
	// If only addr[14] is set -> we are at screen
	Xor (a=isKbd, b=address[14], out=isScrn);
	
	// If we are not in Kbd or Scrn --> we are at main memory
	Or (a=isKbd, b=isScrn, out=isKbdOrScrn);
	Not (in=isKbdOrScrn, out=isMemory);
	
	// assign load bit to appropriate location
	And (a=load, b=isScrn, out=scrnLoad);
	And (a=load, b=isMemory, out=memLoad);
    
	// Load new values and probe corresponding output
	RAM16K(in=in, load=memLoad, address=address[0..13], out=memOut);
	Screen(in=in, load=scrnLoad, address=address[0..12], out=scrnOut);
	Keyboard(out=kbdOut);
	
	// Filter only the desired output by checking the last two bits
	// 00 OR 01 --> main memory
	// 10       --> screen
	// 11       --> keyboard
	Mux4Way16(a=memOut, b=memOut, c=scrnOut, d=kbdOut, sel=address[13..14], out=out);
}