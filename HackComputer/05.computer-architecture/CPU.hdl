// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		/* 
			Instruction bits description for the C-instruction
			15 - op code
			14 - Not used
			13 - Not used
			
			* a bit - specifies second ALU input (M or A)
			12 - a bit (0 - ARegister, 1 - Memory)
			
			* ALU control bits
			11 - zx
			10 - nx
			9  - zy
			8  - ny
			7  - f
			6  - no
			
			* Dest bits
			5 - A Register
			4 - D Register
			3 - Memory
			
			* Jump bits
			2 - LESS
			1 - EQUAL
			0 - GREATER
		*/
		
		Not (in=instruction[15], out=notOpCode);
		
		/* ARegister processing */
		Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegisterIn);
		
		Or (a=notOpCode, b=instruction[5], out=aRegisterLoad);
		ARegister(in=aRegisterIn, load=aRegisterLoad, out=aRegisterOut);
		
		/* DRegister processing */
		And (a=instruction[15], b=instruction[4], out=dRegisterLoad);
		DRegister(in=aluOut, load=dRegisterLoad, out=dRegisterOut);
		
		/* Second ALU input choice */
		Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=secondAluIn);
		
		/* ALU Processing */
		ALU(
		    /* IN */
		    x=dRegisterOut, 
		    y=secondAluIn, 
			zx=instruction[11], 
			nx=instruction[10], 
			zy=instruction[9], 
			ny=instruction[8], 
			f=instruction[7], 
			no=instruction[6],
			/* OUT */
			out=aluOut,
			zr=isAluOutZero,
			ng=isAluOutNegative);
		
		/* PC Control bits processing */
		// instr[1] && zr
		And(a=instruction[1], b=isAluOutZero, out=isEqual);
		
		// instr[2] && ng
		And(a=instruction[2], b=isAluOutNegative, out=isLess);
			
		// instr[0] && !(ng || zr)
		Or (a=isAluOutZero, b=isAluOutNegative, out=isLessOrEqual);
		Not (in=isLessOrEqual, out=isGreaterTrue);
		And(a=instruction[0], b=isGreaterTrue, out=isGreater);
		
		// (isEqual || isLess || isGreater) && opcode
		Or (a=isEqual, b=isLess, out=isEqualOrLess);
		Or (a=isEqualOrLess, b=isGreater, out=isEqualLessOrGreater);
		And (a=instruction[15], b=isEqualLessOrGreater, out=pcLoad);
		
		/* PC Processing */
		PC(in=aRegisterOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);

	    /* Process outputs */
		// ALU Out --> outM
		And16 (a=aluOut, b=true, out=outM);
		
		// opcode == 1 && dest == M --> writeM
		And (a=instruction[3], b=instruction[15], out=writeM);
		
		// ARegisterOut --> addressM
		And16 (a=aRegisterOut, b=true, out[0..14]=addressM);
}