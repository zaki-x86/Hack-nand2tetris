// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length;
	field int maxL;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength > 0) {
			let str = Array.new(maxLength);
		}
		let length = 0;
		let maxL = maxLength;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (maxL > 0) {
			do Memory.deAlloc(str);
		}
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if (j < length) {
			return str[j];
		} else {
			return 0;
		}
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if (j < length) {
			let str[j] = c;
		} else {
			/* do nothing */
		}

		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (length < maxL) {	
			let str[length] = c;
			let length = length + 1;
		}

		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int res, i;
		var bool negative;
		let res = 0;
		let i = 0;
		
		if (maxL = 0) {
			return -1;
		}

		if (str[i] = 45) {
			let negative = true;
			let i = i + 1;
		} else {
			let negative = false;
		}
			
		while (i < length) {
			if ((str[i] > 47) & (str[i] < 58)) {
				let res = (res * 10) + (str[i] - 48);		
			}
			else {
				// incorrect string
				return -1;		
			}

			let i = i + 1;
		}
		
		if (negative) {
			let res = -res;
		}

		return res;    
	}

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		if (val < 0) {
			if (maxL > 0) {
				// minus sign
				let str[0] = 45;
			}

			let val = -val;
			let length = 1;
		} else {	
			let length = 0;
		}
		
		do int2String(val);
		return; 
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;    
	}

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }

	method void int2String(int val) {
		var int lastDigit;
		var int ch;	

		// lastDigit = val % 10;
		let lastDigit = val - ((val/10) * 10);
		
		// ch = digit + '0';
		let ch = lastDigit + 48;

		if (val < 10) {
			/* do nothing */
		} else {
			do int2String(val / 10);
		}

		if (maxL > length) {
			let str[length] = ch;
			let length = length + 1;
		}

		return;
	}
}
