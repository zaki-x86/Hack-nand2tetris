// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram;
	static int freeList;
	static Array heap;
	
    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let freeList = 2048;
		let heap = freeList;
		let heap[0] = 0;
		let heap[1] = 14335;
		
		return;
	}

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
	}

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
	}

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int currentSize;
		var int block;
		
		let heap = freeList;
		let currentSize = heap[1];
		
		// find first fit
		while ((~(heap = 0)) & (currentSize < (size + 2)))
		{
			let heap = heap[0];
			let currentSize = heap[1];
		}
		
		if (heap = 0)
		{
			// no free space
			do Sys.error(1);
		}
		
		// update current segment size;
		let heap[1] = (currentSize-size-2);
		
		// create new segment
		let block = ((heap+currentSize+2)-size);
		let heap = (block-2);
		let heap[0] = 0;
		let heap[1] = size;
		
		return block;
	}

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		let heap = o-2;
		let heap[0] = freeList;
		let freeList = heap;
		
		return;
	}    
}
