// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int powersOfTwo;

   /** Initializes the library. */
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = powersOfTwo[14] + powersOfTwo[14];
        return;
    }

    function bool bit(int number, int pos) {
        return (powersOfTwo[pos] & number);
    }
    
    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
            let x = -x;					
		}

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int bitPos;

        let sum = 0;
        let shiftedX = x;
        let bitPos = 0;

        while (bitPos < 16) {
            if (Math.bit(y, bitPos)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let bitPos = bitPos + 1;
        }

        return sum;
    }
    
    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int yDoubled;
        var int result;
        var bool isNegative;

        let isNegative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);


        if (y > x) {
            return 0;
        }
        
        let yDoubled = y * 2;
        
        // overflow
        if (yDoubled < 0) {
            return 0;
        }

        let q = x / yDoubled;

        if ((x - (q * yDoubled)) < y) {
            let result = 2 * q;
        }
        else {
            let result = (2 * q) + 1;
        }

        if (isNegative) {
            let result = -result;
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int min;
        var int max;
        var int middle;
        var int middlePlusOne;
        var int firstBound;
        var int secondBound;

        let min = 0;
        let max = x;
        
        while (min < max) {
            let middle = (min + max) / 2;
            let middlePlusOne = middle + 1;
            
            let firstBound = middle * middle;
            let secondBound = middlePlusOne * middlePlusOne;

            if (firstBound < 0) {
                let max = middle;
            }
            else {
                // Without edge cases: (firstBound <= x) && (x < secondBound)
                if (((firstBound < x) | (firstBound = x)) & 
                    ((x < secondBound) | (secondBound < 0))) {
                    
                    return middle;   
                }
                else {
                    if (firstBound > x) {
                        let max = middle;
                    }
                    else {
                        let min = middle + 1;
                    }
                }
            }
           
        }
        
        return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
